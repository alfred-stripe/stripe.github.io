{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/seo.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["NotFoundPage","render","this","props","data","site","siteMetadata","title","React","Component","pageQuery","m","module","exports","require","default","StaticQueryContext","loader","enqueue","createContext","StaticQueryDataRenderer","staticQueryData","query","finalData","Fragment","StaticQuery","children","Consumer","SEO","description","lang","meta","keywords","detailsQuery","metaDescription","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"0KAKMA,E,gLACJC,OAAA,WACmBC,KAAKC,MAAdC,KACeC,KAAKC,aAAaC,MAEzC,OACE,8BACE,kBAAC,IAAD,CAAKA,MAAM,mBACX,yCACA,wF,GATmBC,IAAMC,WAelBT,YAER,IAAMU,EAAS,c,oBCtBtB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,G,iCCA/C,oDAgBMK,GAhBN,kBAcyBC,QAAOC,QAELV,IAAMW,cAAc,KAE/C,SAASC,EAAT,GAA4E,IAAzCC,EAAwC,EAAxCA,gBAAiBjB,EAAuB,EAAvBA,KAAMkB,EAAiB,EAAjBA,MAAOrB,EAAU,EAAVA,OACzDsB,EAAYnB,EACdA,EAAKA,KACLiB,EAAgBC,IAAUD,EAAgBC,GAAOlB,KAErD,OACE,kBAAC,IAAMoB,SAAP,KACGD,GAAatB,EAAOsB,IACnBA,GAAa,uDAKrB,IAAME,EAAc,SAAAtB,GAAU,IACpBC,EAAkCD,EAAlCC,KAAMkB,EAA4BnB,EAA5BmB,MAAOrB,EAAqBE,EAArBF,OAAQyB,EAAavB,EAAbuB,SAE7B,OACE,kBAACV,EAAmBW,SAApB,KACG,SAAAN,GAAe,OACd,kBAACD,EAAD,CACEhB,KAAMA,EACNkB,MAAOA,EACPrB,OAAQA,GAAUyB,EAClBL,gBAAiBA,Q,yFCpC3B,SAASO,EAAT,GAA4D,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUzB,EAAS,EAATA,MAChD,OACE,kBAAC,IAAD,CACEe,MAAOW,EACPhC,OAAQ,SAAAG,GACN,IAAM8B,EACJL,GAAezB,EAAKC,KAAKC,aAAauB,YACxC,OACE,kBAAC,IAAD,CACEM,eAAgB,CACdL,QAEFvB,MAAOA,EACP6B,cAAa,QAAUhC,EAAKC,KAAKC,aAAaC,MAC9CwB,KAAM,CACJ,CACEM,KAAK,cACLC,QAASJ,GAEX,CACEK,SAAS,WACTD,QAAS/B,GAEX,CACEgC,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASlC,EAAKC,KAAKC,aAAakC,QAElC,CACEH,KAAK,gBACLC,QAAS/B,GAEX,CACE8B,KAAK,sBACLC,QAASJ,IAGVO,OACCT,EAASU,OAAS,EACd,CACEL,KAAK,WACLC,QAASN,EAASW,KAAT,OAEX,IAELF,OAAOV,MAtDlB,SA8DJH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNC,SAAU,IAWGJ,MAEf,IAAMK,EAAY,c,yQC/DHY,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGEvC,IAAMwC,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-404-js-2562a0cd41088e407795.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport SEO from \"../components/seo\"\n\nclass NotFoundPage extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n\n    return (\n      <main>\n        <SEO title=\"404: Not Found\" />\n        <h1>Not Found</h1>\n        <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n      </main>\n    )\n  }\n}\n\nexport default NotFoundPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description;\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription\n              },\n              {\n                property: `og:title`,\n                content: title\n              },\n              {\n                property: `og:description`,\n                content: metaDescription\n              },\n              {\n                property: `og:type`,\n                content: `website`\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author\n              },\n              {\n                name: `twitter:title`,\n                content: title\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription\n              }\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `)\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: []\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired\n};\n\nexport default SEO;\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}