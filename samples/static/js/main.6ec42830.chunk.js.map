{"version":3,"sources":["Header.tsx","Card/TestCard.tsx","Card/TestCards.tsx","Card/animations.ts","Card/IconButton.tsx","Card/Title.tsx","Card/Image.tsx","Card/DemoFrame.tsx","Card/index.tsx","utils/use-inverted-border-radius.ts","utils/use-scroll-constraints.ts","CardList.tsx","index.tsx"],"names":["Header","react","className","src","TestCard","React","_ref","cardNumber","type","_useState","useState","_useState2","Object","slicedToArray","copyButtonText","setCopyButtonText","lib","text","onCopy","setTimeout","TestCards","inverted","useInvertedScale","framer_motion_es","div","style","objectSpread","originY","originX","openSpring","stiffness","damping","closeSpring","IconButton","icon","url","onClick","img","concat","alt","initial","transition","href","target","Title","title","platform","category","isSelected","cliCommand","id","repoUrl","x","y","buttonsOpacity","categoryOpacity","buttonsY","animate","transformTemplate","scaleTranslate","span","opacity","IconButton_IconButton","_ref2","scaleX","scaleY","Image","DemoFrame","demoUrl","isCommandShown","progress","useAnimation","width","duration","pointerEvents","scale","onLoad","isLoaded","start","dismissDistance","Card","memo","history","backgroundColor","useMotionValue","zIndex","radius","borderRadius","useEffect","updateRadius","latestX","get","latestY","xRadius","yRadius","set","unsubScaleX","onChange","unsubScaleY","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","useInvertedBorderRadius","cardRef","useRef","constraints","ref","measureConstraints","top","bottom","setConstraints","element","current","viewportHeight","window","innerHeight","contentTop","offsetTop","contentHeight","offsetHeight","scrollableViewport","Math","min","useScrollConstraints","setIsCommandShown","toggleCLICommand","Card_Overlay","layoutTransition","drag","dragConstraints","onDrag","push","onUpdate","latest","Image_Image","DemoFrame_DemoFrame","Title_Title","react_router_dom","to","prev","next","Overlay","List","match","cardData","map","card","assign","key","params","CardList","basename","react_router","path","component","description","rootElement","document","getElementById","render","Header_Header","CardList_CardList"],"mappings":"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","file":"static/js/main.6ec42830.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport const Header = () => (\n  <header>\n    <div className=\"header-content\">\n      <span className=\"logo\">\n        <img src=\"assets/logo.png\" />\n      </span>\n      <h1>\n        <span className=\"light\">Samples.</span>\n        <br />\n        Pre-made building blocks to get started on Stripe.\n      </h1>\n    </div>\n  </header>\n);\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { motion, useInvertedScale } from \"framer-motion\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { TestCardData } from \"../types\";\n\nexport const TestCard = React.memo(({ cardNumber, type }: TestCardData) => {\n  const [copyButtonText, setCopyButtonText] = useState(\"Copy\");\n  const onCopy = () => {\n    setCopyButtonText(\"✓ Copied\");\n    setTimeout(() => {\n      setCopyButtonText(\"Copy\");\n    }, 2000);\n  };\n  return (\n    <div className=\"test-card\">\n      <h5>{type}</h5>\n      <div className=\"test-card-row\">\n        <p>{cardNumber}</p>\n        <CopyToClipboard text={cardNumber} onCopy={onCopy}>\n          <button className=\"link-button\">{copyButtonText}</button>\n        </CopyToClipboard>\n      </div>\n    </div>\n  );\n});\n","import * as React from \"react\";\nimport { motion, useInvertedScale } from \"framer-motion\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { TestCard } from \"./TestCard\";\n\nexport const TestCards = React.memo(() => {\n  const inverted = useInvertedScale();\n  return (\n    <motion.div\n      className=\"content-container\"\n      style={{ ...inverted, originY: 0, originX: 0 }}\n    >\n      <div className=\"content-column content-body\">\n        <h4>Test cards</h4>\n        <p>\n          Use test cards to simulate different scenarios, in combination with\n          any number for expiration and CVC.\n        </p>\n      </div>\n      <div className=\"content-column\">\n        <TestCard cardNumber=\"4242 4242 4242 4242\" type=\"Successful payment\" />\n      </div>\n    </motion.div>\n  );\n});\n","export const openSpring = { type: \"spring\", stiffness: 200, damping: 30 };\nexport const closeSpring = { type: \"spring\", stiffness: 300, damping: 35 };\n","import * as React from \"react\";\nimport { motion, useInvertedScale } from \"framer-motion\";\nimport { closeSpring } from \"./animations\";\n\nexport const IconButton = ({ icon, text, url, onClick }) => {\n  return (\n    <div className=\"icon-button\">\n      <motion.img\n        className=\"icon-button-icon\"\n        src={`assets/icon-${icon}.svg`}\n        alt=\"\"\n        initial={false}\n        transition={closeSpring}\n      />\n      <span className=\"icon-button-text\">{text}</span>\n      {url && <a href={url} target=\"_blank\" className={`card-open-link`} />}\n      {onClick && <a onClick={onClick} className={`card-open-link`} />}\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { motion, useInvertedScale } from \"framer-motion\";\nimport { closeSpring, openSpring } from \"./animations\";\nimport { IconButton } from \"./IconButton\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nexport const Title = ({\n  title,\n  platform,\n  category,\n  isSelected,\n  cliCommand,\n  id,\n  repoUrl\n}) => {\n  const inverted = useInvertedScale();\n  const x = isSelected ? 32 : 16;\n  const y = isSelected ? 24 : 200;\n  const buttonsOpacity = isSelected ? 1 : 0;\n  const categoryOpacity = isSelected ? 0 : 0.7;\n  const buttonsY = isSelected ? -10 : 0;\n\n  return (\n    <motion.div\n      className=\"title-container\"\n      initial={false}\n      animate={{ x, y }}\n      transition={isSelected ? openSpring : closeSpring}\n      transformTemplate={scaleTranslate}\n      style={{ ...inverted, originX: 0, originY: 0 }}\n    >\n      <h3>{title}</h3>\n      <motion.span\n        className=\"category\"\n        animate={{ opacity: categoryOpacity }}\n        initial={false}\n        transition={isSelected ? openSpring : closeSpring}\n      >\n        {platform} &#183; {category}\n      </motion.span>\n      <motion.div\n        className=\"title-buttons\"\n        animate={{ y: buttonsY, opacity: buttonsOpacity }}\n        transition={isSelected ? openSpring : closeSpring}\n        initial={false}\n      >\n        <CopyToClipboard text={`stripe samples create ${id}`}>\n          <IconButton\n            text=\"Start with CLI\"\n            icon=\"terminal\"\n            url=\"\"\n            onClick={cliCommand}\n          />\n        </CopyToClipboard>\n        <IconButton\n          text=\"Open on GitHub\"\n          icon=\"github\"\n          url={repoUrl}\n          onClick={null}\n        />\n      </motion.div>\n    </motion.div>\n  );\n};\n\nconst scaleTranslate = ({ x, y, scaleX, scaleY }) =>\n  `scaleX(${scaleX}) scaleY(${scaleY}) translate(${x}, ${y}) translateZ(0)`;\n","import * as React from \"react\";\nimport { motion, useInvertedScale } from \"framer-motion\";\nimport { closeSpring } from \"./animations\";\n\nexport const Image = ({ id, isSelected }) => {\n  const inverted = useInvertedScale();\n\n  return (\n    <motion.div\n      className=\"card-image-container\"\n      style={{ ...inverted, originX: 0, originY: 0 }}\n    >\n      <motion.img\n        className=\"card-image\"\n        src={`images/${id}.svg`}\n        alt=\"\"\n        initial={false}\n        animate={\n          isSelected ? { x: 0, y: -40, opacity: 0 } : { x: 0, y: 0, opacity: 1 }\n        }\n        transition={closeSpring}\n      />\n    </motion.div>\n  );\n};\n","import * as React from \"react\";\nimport { motion, useInvertedScale, useAnimation } from \"framer-motion\";\nimport { closeSpring } from \"./animations\";\nimport { IconButton } from \"./IconButton\";\n\nexport const DemoFrame = ({\n  id,\n  isSelected,\n  demoUrl,\n  isCommandShown,\n  cliCommand\n}) => {\n  const inverted = useInvertedScale();\n  const progress = useAnimation();\n\n  function frameLoaded(isLoaded) {\n    progress.start({\n      opacity: 0\n    });\n  }\n\n  return (\n    <motion.div\n      className=\"card-demo-container\"\n      style={{ ...inverted, originX: 0, originY: 0 }}\n      initial={false}\n      animate={\n        isSelected ? { x: 32, y: 16, opacity: 1 } : { x: 0, y: 184, opacity: 0 }\n      }\n      transition={closeSpring}\n    >\n      {isSelected && (\n        <>\n          <motion.div className=\"card-demo-loader-container\" animate={progress}>\n            <motion.div\n              className=\"card-demo-loader\"\n              animate={{ width: [0, 680, 700] }}\n              transition={{ duration: 3 }}\n            />\n          </motion.div>\n          <motion.div\n            className=\"cli-command\"\n            style={{ pointerEvents: isCommandShown ? \"auto\" : \"none\" }}\n            animate={\n              isCommandShown\n                ? { opacity: 1, scale: 1 }\n                : { opacity: 0, scale: 1.2 }\n            }\n            transition={closeSpring}\n            initial={false}\n          >\n            <div className=\"cli-command-content\">\n              <h4>✓ Command copied to clipboard</h4>\n              <p>\n                With the{\" \"}\n                <a href=\"https://github.com/stripe/stripe-cli\" target=\"_blank\">\n                  Stripe CLI\n                </a>\n                , you can bootstrap this sample with your own keys and assets.\n              </p>\n              <code>$ stripe samples create {id}</code>\n              <p>\n                <a\n                  onClick={() => {\n                    cliCommand(false);\n                  }}\n                >\n                  Done\n                </a>\n              </p>\n            </div>\n          </motion.div>\n          <iframe className=\"demo-frame\" src={demoUrl} onLoad={frameLoaded} />\n        </>\n      )}\n    </motion.div>\n  );\n};\n","import * as React from \"react\";\nimport { memo, useRef, useState } from \"react\";\nimport { motion, useMotionValue } from \"framer-motion\";\nimport { Link } from \"react-router-dom\";\nimport { useInvertedBorderRadius } from \"../utils/use-inverted-border-radius\";\nimport { CardData } from \"../types\";\nimport { TestCards } from \"./TestCards\";\nimport { Title } from \"./Title\";\nimport { Image } from \"./Image\";\nimport { openSpring, closeSpring } from \"./animations\";\nimport { useScrollConstraints } from \"../utils/use-scroll-constraints\";\nimport { DemoFrame } from \"./DemoFrame\";\n\ninterface Props extends CardData {\n  isSelected: boolean;\n  history: {\n    push: (route: string) => void;\n  };\n}\n\nconst dismissDistance = 150;\n\nexport const Card = memo(\n  ({\n    isSelected,\n    id,\n    title,\n    category,\n    platform,\n    history,\n    backgroundColor,\n    repoUrl,\n    demoUrl\n  }: Props) => {\n    const y = useMotionValue(0);\n    const zIndex = useMotionValue(isSelected ? 2 : 0);\n    backgroundColor = isSelected ? backgroundColor : backgroundColor;\n\n    const inverted = useInvertedBorderRadius(8);\n\n    const cardRef = useRef(null);\n    const constraints = useScrollConstraints(cardRef, isSelected);\n\n    const [isCommandShown, setIsCommandShown] = useState(false);\n\n    function toggleCLICommand() {\n      setIsCommandShown(!isCommandShown);\n    }\n\n    function checkSwipeToDismiss() {\n      y.get() > dismissDistance && history.push(\"/\");\n    }\n\n    function checkZIndex(latest) {\n      if (isSelected) {\n        zIndex.set(2);\n      } else if (!isSelected && latest.scaleX < 1.01) {\n        zIndex.set(0);\n      }\n    }\n\n    // When this card is selected, attach a wheel event listener\n    // const containerRef = useRef(null);\n    // useWheelScroll(\n    //   containerRef,\n    //   y,\n    //   constraints,\n    //   checkSwipeToDismiss,\n    //   isSelected\n    // );\n\n    return (\n      <li className={`card`}>\n        <Overlay isSelected={isSelected} />\n        <div className={`card-content-container ${isSelected && \"open\"}`}>\n          <motion.div\n            ref={cardRef}\n            className=\"card-content\"\n            style={{ ...inverted, zIndex, y, backgroundColor }}\n            layoutTransition={isSelected ? openSpring : closeSpring}\n            drag={isSelected ? \"y\" : false}\n            dragConstraints={constraints}\n            onDrag={checkSwipeToDismiss}\n            onUpdate={checkZIndex}\n          >\n            <Image id={id} isSelected={isSelected} />\n            <DemoFrame\n              id={id}\n              isSelected={isSelected}\n              isCommandShown={isCommandShown}\n              cliCommand={toggleCLICommand}\n              demoUrl={demoUrl}\n            />\n            <Title\n              title={title}\n              platform={platform}\n              category={category}\n              isSelected={isSelected}\n              cliCommand={toggleCLICommand}\n              id={id}\n              repoUrl={repoUrl}\n            />\n            <TestCards />\n          </motion.div>\n        </div>\n        {!isSelected && <Link to={id} className={`card-open-link`} />}\n      </li>\n    );\n  },\n  (prev, next) => prev.isSelected === next.isSelected\n);\n\nconst Overlay = ({ isSelected }) => (\n  <motion.div\n    initial={false}\n    animate={{ opacity: isSelected ? 1 : 0 }}\n    transition={{ duration: 0.2 }}\n    style={{ pointerEvents: isSelected ? \"auto\" : \"none\" }}\n    className=\"overlay\"\n  >\n    <Link to=\"/\" />\n  </motion.div>\n);\n","import { useMotionValue, useInvertedScale } from \"framer-motion\";\nimport { useEffect } from \"react\";\n\n/**\n * Avoid the stretch/squashing of border radius by using inverting them\n * throughout the component's layout transition.\n *\n * It would be possible to animate to/from different radius, for instance\n * in mobile mode from rounded to square for full-screen panels, by passing\n * the calculated inverted transform to `layoutTransition` when set as a function.\n *\n * Those inverted scales could be provided here to act as a `from` value,\n * then we can use Popcorn's `mix` function to get our\n *\n * @param radius\n */\nexport function useInvertedBorderRadius(radius: number) {\n  const scaleX = useMotionValue(1);\n  const scaleY = useMotionValue(1);\n  const inverted = useInvertedScale({ scaleX, scaleY });\n  const borderRadius = useMotionValue(`${radius}px`);\n\n  useEffect(() => {\n    function updateRadius() {\n      const latestX = inverted.scaleX.get();\n      const latestY = inverted.scaleY.get();\n      const xRadius = latestX * radius + \"px\";\n      const yRadius = latestY * radius + \"px\";\n\n      borderRadius.set(`${xRadius} ${yRadius}`);\n    }\n\n    const unsubScaleX = inverted.scaleX.onChange(updateRadius);\n    const unsubScaleY = inverted.scaleY.onChange(updateRadius);\n\n    return () => {\n      unsubScaleX();\n      unsubScaleY();\n    };\n  }, [radius]);\n\n  return {\n    scaleX,\n    scaleY,\n    borderTopLeftRadius: borderRadius,\n    borderTopRightRadius: borderRadius,\n    borderBottomLeftRadius: borderRadius,\n    borderBottomRightRadius: borderRadius\n  };\n}\n","import { useState, useEffect } from \"react\";\n\ninterface Constraints {\n  top: number;\n  bottom: number;\n}\n\n/**\n * Calculate the top/bottom scroll constraints of a full-screen element vs the viewport\n */\nexport function useScrollConstraints(ref, measureConstraints: boolean) {\n  const [constraints, setConstraints] = useState<Constraints>({\n    top: 0,\n    bottom: 0\n  });\n\n  useEffect(() => {\n    if (!measureConstraints) return;\n\n    const element = ref.current;\n    const viewportHeight = window.innerHeight;\n    const contentTop = element.offsetTop;\n    const contentHeight = element.offsetHeight;\n    const scrollableViewport = viewportHeight - contentTop * 2;\n    const top = Math.min(scrollableViewport - contentHeight, 0);\n\n    setConstraints({ top, bottom: 0 });\n  }, [measureConstraints]);\n\n  return constraints;\n}\n","import * as React from \"react\";\nimport { Card } from \"./Card\";\nimport { CardData } from \"./types\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nconst List = ({ match, history }) => (\n  <ul className=\"card-list\">\n    {cardData.map(card => (\n      <Card\n        key={card.id}\n        isSelected={match.params.id === card.id}\n        history={history}\n        {...card}\n      />\n    ))}\n  </ul>\n);\n\nexport const CardList = () => (\n  <Router basename=\"/\">\n    <Route path={[\"/:id\", \"/\"]} component={List} />\n  </Router>\n);\n\nconst cardData: CardData[] = [\n  {\n    id: \"adding-sales-tax\",\n    platform: \"Web\",\n    category: \"Payment flow\",\n    title: \"Custom payment flow with simple tax logic\",\n    description:\n      \"This sample includes a payment page built with Stripe Elements, and a HTTP server in your language of choice integrated Payment Intents to process payments.\",\n    backgroundColor: \"#00C220\",\n    demoUrl: \"https://cf6kr.sse.codesandbox.io/\",\n    repoUrl: \"https://github.com/stripe-samples/adding-sales-tax\"\n  },\n  {\n    id: \"payment-form-modal\",\n    platform: \"Web\",\n    category: \"Payment flow\",\n    title: \"Modal payment flow with Stripe Elements\",\n    description:\n      \"This sample includes a payment page built with Stripe Elements, and a HTTP server in your language of choice integrated Payment Intents to process payments.\",\n    backgroundColor: \"#778592\",\n    demoUrl: \"https://9qmxf.sse.codesandbox.io/\",\n    repoUrl: \"https://github.com/stripe-samples/payment-form-modal\"\n  },\n  {\n    id: \"checkout-single-subscription\",\n    platform: \"Web\",\n    category: \"Subscriptions\",\n    title: \"Start subscriptions from a pricing page with Checkout\",\n    description:\n      \"This sample includes a payment page built with Stripe Elements, and a HTTP server in your language of choice integrated Payment Intents to process payments.\",\n    backgroundColor: \"#4DB7E8\",\n    demoUrl: \"https://4iupj.sse.codesandbox.io/\",\n    repoUrl: \"https://github.com/stripe-samples/checkout-single-subscription\"\n  },\n  {\n    id: \"placing-a-hold\",\n    platform: \"Web\",\n    category: \"Payment flow\",\n    title: \"Placing a hold then capture funds\",\n    description:\n      \"This sample includes a payment page built with Stripe Elements, and a HTTP server in your language of choice integrated Payment Intents to process payments.\",\n    backgroundColor: \"#6C8EEF\",\n    demoUrl: \"https://nbzjj.sse.codesandbox.io/\",\n    repoUrl: \"https://github.com/stripe-samples/placing-a-hold\"\n  },\n  {\n    id: \"saving-card-without-payment\",\n    platform: \"Web\",\n    category: \"Payment flow\",\n    title: \"Saving cards without a payment\",\n    description:\n      \"This sample includes a payment page built with Stripe Elements, and a HTTP server in your language of choice integrated Payment Intents to process payments.\",\n    backgroundColor: \"#EBAC00\",\n    demoUrl: \"https://q0sh7.sse.codesandbox.io/\",\n    repoUrl: \"https://github.com/stripe-samples/saving-card-without-payment\"\n  },\n  {\n    id: \"checkout-one-time-payments\",\n    platform: \"Web\",\n    category: \"Payment flow\",\n    title: \"Take one-time payments with Stripe Checkout\",\n    description:\n      \"This sample includes a payment page built with Stripe Elements, and a HTTP server in your language of choice integrated Payment Intents to process payments.\",\n    backgroundColor: \"#DE8367\",\n    demoUrl: \"https://0hczv.sse.codesandbox.io/\",\n    repoUrl: \"https://github.com/stripe-samples/checkout-one-time-payments\"\n  },\n  {\n    id: \"stripe-payments-demo\",\n    platform: \"Web\",\n    category: \"Payment flow\",\n    title: \"Support international payment methods\",\n    description:\n      \"This sample includes a payment page built with Stripe Elements\",\n    backgroundColor: \"#00C220\",\n    demoUrl: \"https://stripe-payments-demo.appspot.com/\",\n    repoUrl: \"https://github.com/stripe/stripe-payments-demo\"\n  },\n  {\n    id: \"react-elements-card-payment\",\n    platform: \"Web\",\n    category: \"Payment flow\",\n    title: \"Custom payment form with React Elements\",\n    description:\n      \"This sample includes a payment page built with React and Stripe Elements\",\n    backgroundColor: \"#778592\",\n    demoUrl: \"https://22r0o-3000.sse.codesandbox.io/\",\n    repoUrl: \"https://github.com/stripe-samples/react-elements-card-payment\"\n  }\n];\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { Header } from \"./Header\";\nimport { CardList } from \"./CardList\";\n\nimport \"./styles.css\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <CardList />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}