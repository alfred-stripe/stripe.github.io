{"version":3,"sources":["webpack:///./src/pages/details.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["React","Component","m","module","exports","require","default","StaticQueryContext","loader","enqueue","createContext","StaticQueryDataRenderer","staticQueryData","data","query","render","finalData","Fragment","StaticQuery","props","children","Consumer","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"4HAQ2BA,IAAMC,W,oBCRjC,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,G,iCCA/C,oDAgBMK,GAhBN,kBAcyBC,QAAOC,QAELT,IAAMU,cAAc,KAE/C,SAASC,EAAT,GAA4E,IAAzCC,EAAwC,EAAxCA,gBAAiBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACzDC,EAAYH,EACdA,EAAKA,KACLD,EAAgBE,IAAUF,EAAgBE,GAAOD,KAErD,OACE,kBAAC,IAAMI,SAAP,KACGD,GAAaD,EAAOC,IACnBA,GAAa,uDAKrB,IAAME,EAAc,SAAAC,GAAU,IACpBN,EAAkCM,EAAlCN,KAAMC,EAA4BK,EAA5BL,MAAOC,EAAqBI,EAArBJ,OAAQK,EAAaD,EAAbC,SAE7B,OACE,kBAACb,EAAmBc,SAApB,KACG,SAAAT,GAAe,OACd,kBAACD,EAAD,CACEE,KAAMA,EACNC,MAAOA,EACPC,OAAQA,GAAUK,EAClBR,gBAAiBA,Q,0ECnBZU,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGExB,IAAMyB,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-details-js-6a8119475a6fa7e0f4b1.js","sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\n// // import StripeTitle from \"../../assets/header.svg\";\n// // import Collapse from \"../../assets/collapse.svg\";\n// // import TriangleIcon from \"../../assets/triangle-right.svg\";\n// // import GithubLogo from \"../../assets/logo-github.svg\";\n// // import TestingSection from \"../components/testing-section\";\n\nclass DemoTemplate extends React.Component {\n  handleClick(evt) {\n    if (evt.target.className === \"copy-btn\") {\n      evt.preventDefault();\n      const target = evt.target;\n\n      target.parentNode.children[0].select();\n      const isSuccessful = document.execCommand(\"copy\");\n      if (isSuccessful) {\n        target.textContent = \"Copied!\";\n        setTimeout(() => {\n          target.textContent = \"Copy\";\n        }, 2000);\n      }\n    }\n  }\n  render() {\n    <>Haloo</>;\n  }\n}\n//     const post = this.props.data.markdownRemark;\n\n//     console.log(\"testing\", this.props.pageContext);\n//     return (\n//       <main id=\"recipe\" style={{ background: post.frontmatter.color }}>\n//         <section className=\"recipe-header\">\n//           <div>\n//             <h1>{post.frontmatter.name}</h1>\n//             <p>{post.frontmatter.description}</p>\n//             <p>\n//               <a href=\"#\">Clone project</a> <a href=\"#\">Remix on Glitch</a>\n//             </p>\n//           </div>\n//         </section>\n//         <section className=\"iframe-container\">\n//           <p>\n//             <span>Demo</span>\n//             <span>\n//               <span>...</span>\n//               <span>arrows</span>{\" \"}\n//             </span>\n//           </p>\n//           <iframe title=\"Recipe preview\" src={post.frontmatter.demoUrl} />\n//         </section>\n//         <section className=\"recipe-footer\">\n//           <TestingSection\n//             data={this.props.pageContext.testing[0].node.frontmatter}\n//           />\n//         </section>\n//       </main>\n//     );\n//   }\n// }\n\n// export default DemoTemplate;\n\n// export const pageQuery = graphql`\n//   query DemoBySlug($slug: String!) {\n//     site {\n//       siteMetadata {\n//         title\n//         author\n//       }\n//     }\n//     markdownRemark(fields: { slug: { eq: $slug } }) {\n//       id\n//       html\n//       frontmatter {\n//         name\n//         category\n//         date(formatString: \"MMMM DD, YYYY\")\n//         description\n//         demoUrl\n//         codeUrl\n//         color\n//         resources {\n//           text\n//           url\n//           type\n//         }\n//       }\n//     }\n//   }\n// `;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}